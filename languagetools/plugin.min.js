tinymce.PluginManager.add('languagetools', function(editor, url) {

    var css_link = $("<link>", {
        rel: "stylesheet",
        type: "text/css",
        href: url + '/css/default.css'
    });
    css_link.appendTo('head');

   var context_menu = $('<ul class="context-menu-ul"></ul>');
   context_menu.appendTo('body');


editor.on('init', function() {
editor.dom.loadCSS(url + '/css/default.css');
});


var sgcheck = {};
var sgstore = { html:{}, text:{}, obj:{}, lt:{}, lock:{}, run:[], contextmenu:{} };
var timer = 0;
var lastactive=0;


var ftimeout = function() {

timer=timer+100;
lastactive=lastactive+100;

$.each(sgstore['run'], function(i,val) {


   sgstore['run'][i].func();
});
sgstore['run']=[];

if ( timer >= 10000 ) {

timer=0;

var data = {
 text: "",
 language: "en-US"
};


$.each(sgcheck, function(key,val) {

if ( sgstore['lock'][key] != 1  ) {

if ( val.length > 2 && val != sgstore['text'][key] ) {
data['text']=data['text']+val+"\t("+key+")\n\n";
}
sgstore['text'][key] = '' + sgcheck[key];
delete(sgcheck[key]);

}


});

lt_debug( "TEXT="+data['text'] );
if ( data['text'] != '' ) {


$.ajax({
    type: "POST",
    url: "https://languagetool.org/api/v2/check",
    data: data,
    indexValue: { text: data['text']},
    contentType: "application/json; charset=utf-8",
    dataType: "json",
    success: function(data){

var json = data;
var mytext = this.indexValue.text;

var uuidcount={};




  var bookmark = editor.selection.getBookmark();

//lt_debug( 'ok='+JSON.stringify(  editor.selection.getStart() ) );

//editor.selection.setCursorLocation( editor.selection.getStart() , startOffset );

mytext.replace(/\t\(([a-f0-9-]{36})\)\n\n/,function (pmatch,p1) { tempid = p1; 

var temphtml= $(sgstore['obj'][tempid]).html().replace(/<span class="hl[rgnybop][0-9]" data-hid="[0-9]+">(.*?)<\/span>/g, function(match,p1) { return p1; });

lt_debug('CLEAR='+temphtml);
$(sgstore['obj'][tempid]).html(
 temphtml
 
);

return pmatch });

var fmatch={};

var locklist={};

$.each(json['matches'],function(i,item) {

var hclass = 'hly1';

if ( item['rule']['issueType'] == 'misspelling' ) {
hclass = 'hlr1';
} else if ( item['rule']['issueType'] == 'grammar' ) {
hclass = 'hlg1';
} else if ( item['rule']['issueType'] == 'typographical' ) {
hclass = 'hlb1';
} else if ( item['rule']['issueType'] == 'style' ) {
hclass = 'hln1';
} else if ( item['rule']['issueType'] == 'duplication' ) {
hclass = 'hlo1';
} else if ( item['rule']['issueType'] == 'inconsistency' ) {
hclass = 'hlp1';
}

//if (item['rule']['category']['id'] == 'TYPOS') {

var tempstr = mytext.substr( item['offset'] );

lt_debug(tempstr);

var tempid;

tempstr.replace(/^.*?\t\(([a-f0-9-]{36})\)\n\n/,function (match,p1) { tempid = p1; return p1 });

if ( tempid != undefined )  {

//$(tempid).html();

if ( fmatch[tempid] == undefined ) {
sgstore['lt'][ tempid ]={};
fmatch[tempid]=1;
}

sgstore['lt'][ tempid ][i]=item;

lt_highlighter( editor, sgstore['obj'][tempid], i, hclass, item['offset'], item['offset']+item['length']  );
locklist[ tempid ]=1;


}

//alert('tempid='+tempid);

//} else if ( item['rule']['category']['id'] == 'PUNCTUATION' ) {

//}

});


$.each(locklist,function (key,val) {
lt_lock(0, key );
});


//lt_debug('off='+ startOffset+'='+startOffset2+'='+startloc2);
//editor.selection.setCursorLocation(startloc,2);


 editor.selection.moveToBookmark(bookmark); 

lt_debug(data);

    },
    failure: function(errMsg) {
        lt_debug(errMsg);
    }
});
}


}
lt_timer(1);
};


lt_timer(1);


 editor.on('contextmenu', function(e) {

var mynode = e.target;
var pfind = 0;

while ( pfind != 1 ) {
if ( mynode.nodeName == 'STRONG' || mynode.nodeName == 'EM' || (mynode.nodeName == 'SPAN' && /hl[rgnybop][0-9]/.test($(mynode).attr('class')) == false ) ) {
mynode = mynode.parentNode;
} else {
pfind=1;
}
}



lt_debug('CMNODE='+mynode.nodeName  );



if ( /hl[rgnybop][0-9]/.test($(mynode).attr('class')) == true ) {
sgstore['contextmenu']=mynode;

var uuid = $(mynode).parent().data('UUID');
sgstore['lock'][uuid]=1;

var hid = $(mynode).data('hid');

lt_debug('GOODI!!='+uuid);
e.preventDefault();

window.mousePos = [ e.pageX , e.pageY ];

lt_debug( e.pageX + '=' + e.pageY );
$(".context-menu-ul").empty();   

lt_debug( 'lists='+sgstore['lt'][uuid] );

$(".context-menu-ul").append(
$('<li/>', {
    html: sgstore['lt'][uuid][hid]['rule']['description'],
    "class":"context-menu-header"
})
);


           $.each(sgstore['lt'][uuid][hid]['replacements'],function(key,val) {

         
$(".context-menu-ul").append(
$('<li/>', {
    html: val['value'],
    "class":"context-menu-item",
    "data-ident-uuid": uuid,
    "data-ident-hid": hid,
    "data-ident-value": val['value']
})
);



           });    


    $(".context-menu-ul").finish().toggle(100).
    
    // In the right position (the mouse)
    css({
        top: (e.pageY+100) + "px",
        left: e.pageX + "px"
    });

 //$('.context-menu-one').contextMenu();


}



      //  alert("Editor1 Clicked!  Element: " + e.target.nodeName  );
    });


editor.on('NodeChange', function(e) {
lt_timer(0);

var mynode = e.element;
var pfind = 0;

while ( pfind != 1 ) {
if ( mynode.nodeName == 'STRONG' || mynode.nodeName == 'EM' || mynode.nodeName == 'SPAN' ) {
mynode = mynode.parentNode;
} else {
pfind=1;
}
}

var uuid = $(mynode).data('UUID');


if ( uuid == undefined ) {
uuid = getUUID();
$(mynode).data('UUID', uuid );
}

sgcheck[ uuid ]=$(mynode).text();
sgstore['obj'][ uuid ]=mynode;
sgstore['html'][ uuid ]=$(mynode).html();

lt_debug('NODE='+mynode.nodeName+'='+uuid+'='+$(mynode).text()  );
});





editor.on('SetContent', function(data) {
					lt_debug('SETCONT='+data);
				});

				editor.on('GetContent', function(data) {
					lt_debug('GETCONT='+data);
                    });


editor.on('mousedown', function(e) {

    if (!$(e.target).parents(".context-menu-ul").length > 0) {
        
 
        $(".context-menu-ul").hide(100);
    }

});




$(document).bind("mousedown", function (e) {
    
    // If the clicked element is not the menu
    if (!$(e.target).parents(".context-menu-ul").length > 0) {
       
var uuid = $(this).data("ident-uuid");
lt_debug( 'STILLUUID='+uuid );
 sgstore['lock'][uuid]=0;

        // Hide it
        $(".context-menu-ul").hide(100);
    }
});


// If the menu element is clicked
$(document).on('click','.context-menu-item',function(){
    
    // This is the triggered action name
 lt_debug( 'clicked='+$(this).data("ident-uuid")+'='+$(this).data("ident-hid")+'='+$(this).data("ident-value") );



//editor.execCommand('mceRemoveNode',false, this );

//editor.dom.remove('*[data-UUID="'+$(this).data("ident-uuid")+'"] *[data-hid="'+$(this).data("ident-hid")+'"]');

var uuid = $(this).data("ident-uuid");

 sgstore['lock'][uuid]=0;

lt_debug( 'orr='+$('*[data-UUID="'+uuid+'"]').html() );





//var mynode = editor.selection.getNode();
var mynode = sgstore['contextmenu'];


if ( mynode.nodeName == 'SPAN' && /hl[rgnybop][0-9]/.test($(mynode).attr('class')) == true ) {
lt_debug( 'PRERUN='+mynode );

sgstore['run'].push({ node: mynode, value:$(this).data("ident-value"), func: function () {

mynode=this.node;
$( mynode ).replaceWith( this.value );
sgcheck[ uuid ]=$(mynode).parent().text();
sgstore['html'][ uuid ]=$(mynode).parent().html();
}
}
);
}



//editor.dom.remove(this);

//editor.execCommand('mceReplaceContent',false,$(this).data("ident-value") );

  
    // Hide it AFTER the action was triggered
    $(".context-menu-ul").hide(100);
  });








var lut = []; for (var i=0; i<256; i++) { lut[i] = (i<16?'0':'')+(i).toString(16); }
function getUUID()
{
  var d0 = Math.random()*0xffffffff|0;
  var d1 = Math.random()*0xffffffff|0;
  var d2 = Math.random()*0xffffffff|0;
  var d3 = Math.random()*0xffffffff|0;
  return lut[d0&0xff]+lut[d0>>8&0xff]+lut[d0>>16&0xff]+lut[d0>>24&0xff]+'-'+
    lut[d1&0xff]+lut[d1>>8&0xff]+'-'+lut[d1>>16&0x0f|0x40]+lut[d1>>24&0xff]+'-'+
    lut[d2&0x3f|0x80]+lut[d2>>8&0xff]+'-'+lut[d2>>16&0xff]+lut[d2>>24&0xff]+
    lut[d3&0xff]+lut[d3>>8&0xff]+lut[d3>>16&0xff]+lut[d3>>24&0xff];
}




function insertAt (mystr, CharToInsert,Position) {
     return mystr.slice(0,Position) + CharToInsert + mystr.slice(Position)
}






function lt_highlighter ( editor, myobj, myid, myclass , mystart, myend ) {



var alist = {};

var mytext = $(myobj).text();
var myhtml = $(myobj).html();

lt_debug( 'HTML='+myobj+'='+myhtml+'=');

var patt = /\<.*?\>/ig;

while (match = patt.exec(myhtml)) {
 // alert(match.index + ' ' + patt.lastIndex);
 // alist[ match.index ]= patt.lastIndex;
 
 if ( mystart >= match.index ) {
 mystart =  mystart + patt.lastIndex - match.index;
 }
 
 if ( myend > match.index ) {
 myend =  myend + patt.lastIndex - match.index;
 }
  
}

var myspan = '<span class="'+myclass+'" data-hid="'+myid+'">';

myhtml = insertAt(myhtml, myspan,mystart);
myhtml = insertAt(myhtml, '</span>',myend+myspan.length  );

//>var rspan = new RegExp('(('+myspan+').*?)(\<\/.*?\>)(.*?\<\/span\>)');
//>myhtml = myhtml.replace(rspan,function(match,p1,p2,p3,p4) { 
//>return p1+'</span>'+p3+''+p2+''+p4 
//>} );

//alert(mystart);
lt_debug( 'out='+ myhtml );

$(myobj).html( myhtml );

//var astart = substr(mytext, 0, mystart).split(/[^a-zA-Z'0-9]/);



//$.each(atext, function () {


//});

}

function lt_lock (mode, uuid) {


}

function lt_debug (content) {

console.log(content);

}

function lt_timer(mode) {
//lt_debug("mode="+mode);
if ( mode == 1 && lastactive < (30*1000) ) {
setTimeout(ftimeout, 100);
} else if ( mode == 0 && lastactive >= (30*1000) ) {
//console.log('resume!');
lastactive=0;
setTimeout(ftimeout, 100);
} else if ( mode == 0 ) {

}

}


});


