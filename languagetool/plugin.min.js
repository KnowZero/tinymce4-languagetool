/**
 *
 * Copyright, KnowZero
 * Released under Apache 2.0 License.
 * Version 0.03-Alpha
 *
 * Contributing: https://github.com/KnowZero/tinymce4-languagetool
 */

tinymce.PluginManager.add('languagetool', function(editor, url) {

 // Load Stylesheet into UI
 var css_link = $("<link>", {
    rel: "stylesheet",
    type: "text/css",
    href: url + '/css/default.css'
 });
 css_link.appendTo('head');

 // Load ContextMenu into UI
 var context_menu = $('<ul class="context-menu-ul"></ul>');
 context_menu.appendTo('body');

 // Load Stylesheet into Editor DOM
 editor.on('init', function() {
    editor.dom.loadCSS(url + '/css/default.css');
 });


 var sgcheck = {}; // Active storage of changes
 var sgstore = { html:{}, text:{}, obj:{}, lt:{}, lock:{}, run:[], contextmenu:{} }; // Universal Storage
 var timerRunner = 0; // Timer coundown for remote url (counts upwards though)
 var lastActive=0; // Last activity for hibernation

 var lt_remoteUrl = editor.getParam('lt_url') || "https://languagetool.org/api/v2/check";
 var lt_remoteTimer = editor.getParam('lt_timer') || 10000; // DO NOT CHANGE UNLESS YOU USE YOUR OWN URL!
 var lt_setLanguage = editor.getParam('lt_lang') || "en-US";
 var lt_setHighlight = editor.getParam('lt_highlight') || {};
 var lt_debugLevel = editor.getParam('lt_debug') || 0;



 lt_setHighlight['default'] = lt_setHighlight['default'] || "hly1";
 lt_setHighlight['misspelling'] = lt_setHighlight['misspelling'] || "hlr1";
 lt_setHighlight['grammar'] = lt_setHighlight['grammar'] || "hlg1";
 lt_setHighlight['typographical'] = lt_setHighlight['typographical'] || "hlb1";
 lt_setHighlight['style'] = lt_setHighlight['style'] || "hln1";
 lt_setHighlight['duplication'] = lt_setHighlight['duplication'] || "hlo1";
 lt_setHighlight['inconsistency'] = lt_setHighlight['inconsistency'] || "hlp1";
 




 var timerFunc = function() {

    timerRunner+=100;
    lastActive+=100;

    $.each(sgstore['run'], function(i,val) {
        sgstore['run'][i].func();
    });
    sgstore['run']=[];

    if ( timerRunner >= lt_remoteTimer ) {

        timerRunner=0;

        var data = {
            text: "",
            language: lt_setLanguage
        };


        $.each(sgcheck, function(key,val) {

            if ( sgstore['lock'][key] != 1  ) {

                if ( val.length > 2 && val != sgstore['text'][key] ) {
                    data['text']=data['text']+val+"\t("+key+")\n\n";
                }
                sgstore['text'][key] = '' + sgcheck[key];
                delete(sgcheck[key]);
            }


        });

        lt_debug( "INFO|SENT-TEXT="+data['text'], 4 );

        if ( data['text'] != '' ) {


            $.ajax({
                type: "POST",
                url: lt_remoteUrl,
                data: data,
                indexValue: { text: data['text']},
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function(data){

                    var json = data;
                    var mytext = this.indexValue.text;

                    var uuidcount={};
                    var bookmark = editor.selection.getBookmark();

                    mytext.replace(/\t\(([a-f0-9-]{36})\)\n\n/,function (pmatch,p1) { 
                        tempid = p1; 

                        var temphtml= $(sgstore['obj'][tempid]).html().replace(/<span class="hl[rgnybop][0-9]" data-hid="[0-9]+">(.*?)<\/span>/g, function(match,p1) { return p1; });

                        lt_debug('TRACE|CLEAR='+temphtml,6);
                        $(sgstore['obj'][tempid]).html( temphtml );
    
                        return pmatch; 
                    });

                    var fmatch={};
                    var locklist={};

                    $.each(json['matches'],function(i,item) {

                        var hclass = lt_setHighlight['default'];

                        if ( lt_setHighlight[ item['rule']['issueType'] ] != undefined ) {
                            hclass = lt_setHighlight[ item['rule']['issueType'] ];
                        }


                        var tempstr = mytext.substr( item['offset'] );

                        

                        var tempid;
                        var templen;

                        tempstr.replace(/^(.*?\t)\(([a-f0-9-]{36})\)\n\n/,function (pmatch,p1,p2) {  tempid = p2; return pmatch; });

                        mytext.replace( new RegExp("(?:^|\n\n)(.*?\("+tempid+"\))"),function(pmatch,p1) {  templen=mytext.indexOf(p1); return pmatch;  } );

                        if ( tempid != undefined )  {

                            item['offset']-=templen;
                            lt_debug( "TRACE|OFFSET="+item['offset']+'='+templen, 6 );

                            if ( fmatch[tempid] == undefined ) {
                                sgstore['lt'][ tempid ]={};
                                fmatch[tempid]=1;
                            }

                            sgstore['lt'][ tempid ][i]=item;

                            lt_highlighter( editor, sgstore['obj'][tempid], i, hclass, item['offset'], item['offset']+item['length']  );
                            locklist[ tempid ]=1;


                        }

                    });


                    $.each(locklist,function (key,val) {
                        lt_lock(0, key );
                    });

                    editor.selection.moveToBookmark(bookmark); 

                    

                },
                failure: function(errMsg) {
                    lt_debug('ERROR|'+errMsg,2);
                }
            });
        }


    }
 lt_timer(1);
 };


 lt_timer(1);


 editor.on('contextmenu', function(e) {

    var mynode = e.target;
    var pfind = 0;

    while ( pfind != 1 ) {
        if ( mynode.nodeName == 'STRONG' || mynode.nodeName == 'EM' || (mynode.nodeName == 'SPAN' && /hl[rgnybop][0-9]/.test($(mynode).attr('class')) == false ) ) {
            mynode = mynode.parentNode;
        } else {
            pfind=1;
        }
    }



    lt_debug('TRACE|CONTEXT-MENU='+mynode.nodeName , 6 );



    if ( /hl[rgnybop][0-9]/.test($(mynode).attr('class')) == true ) {
        sgstore['contextmenu']=mynode;

        var uuid = $(mynode).parent().data('UUID');
        sgstore['lock'][uuid]=1;

        var hid = $(mynode).data('hid');

        lt_debug('INFO|CONTEXT-MENU-NEW='+mynode.nodeName , 4 );
        e.preventDefault();

        window.mousePos = [ e.pageX , e.pageY ];

        lt_debug( 'TRACE|CONTEXT-MENU-MOUSE='+e.pageX + '=' + e.pageY, 6 );
        $(".context-menu-ul").empty();   

  

        $(".context-menu-ul").append(
            $('<li/>', {
                "html": sgstore['lt'][uuid][hid]['rule']['description'],
                "class":"context-menu-header"
            })
        );


        $.each(sgstore['lt'][uuid][hid]['replacements'],function(key,val) {

         
            $(".context-menu-ul").append(
                $('<li/>', {
                    "html": val['value'],
                    "class":"context-menu-item",
                    "data-ident-uuid": uuid,
                    "data-ident-hid": hid,
                    "data-ident-value": val['value']
                })
            );
        });    


        $(".context-menu-ul").finish().toggle(100).
        css({
            top: (e.pageY+100) + "px",
            left: e.pageX + "px"
        });

    }
 });


 editor.on('PastePreProcess', function (e) {


 });

 editor.on('PastePostProcess', function (e) {

 });


 editor.on('NodeChange', function(e) {
    lt_timer(0); // Resume if idle

    var mynode = e.element;
    var pfind = 0;



    while ( pfind != 1 ) {
        if ( mynode.nodeName == 'STRONG' || mynode.nodeName == 'EM' || mynode.nodeName == 'SPAN' ) {
            mynode = mynode.parentNode;
        } else {
            pfind=1;
        }
    }

    var uuid = $(mynode).data('UUID');


    if ( uuid == undefined ) {
        uuid = getUUID();
        $(mynode).data('UUID', uuid );
    }

    sgcheck[ uuid ]=$(mynode).text();
    sgstore['obj'][ uuid ]=mynode;
    sgstore['html'][ uuid ]=$(mynode).html();

    lt_debug('DEBUG|NODE='+mynode.nodeName+'='+uuid+'='+$(mynode).text() , 5 );
 });





 editor.on('SetContent', function(e) {


    var pnode = tinymce.activeEditor.getBody();
    $(pnode).children().each(function () {

    var mynode=this;

    if ( mynode.nodeName == 'STRONG' || mynode.nodeName == 'EM' || mynode.nodeName == 'SPAN' ) {

    } else {

        var uuid = $(mynode).data('UUID');


        if ( uuid == undefined ) {
            uuid = getUUID();
            $(mynode).data('UUID', uuid );
            sgcheck[ uuid ]=$(mynode).text();
            sgstore['obj'][ uuid ]=mynode;
            sgstore['html'][ uuid ]=$(mynode).html();

        }
    }

 });


 });

 editor.on('GetContent', function(e) {
    lt_debug('INFO|GETCONT='+e, 4);
 });


 editor.on('mousedown', function(e) {
    if (!$(e.target).parents(".context-menu-ul").length > 0) {
        $(".context-menu-ul").hide(100);
    }
 });

 $(document).bind("mousedown", function (e) {
    
    // If the clicked element is not the menu
    if (!$(e.target).parents(".context-menu-ul").length > 0) {
       
        var uuid = $(this).data("ident-uuid");
        lt_debug( 'TRACE|CONTEXT-MENU-NOTCLICK=UUID='+uuid, 6 );
        sgstore['lock'][uuid]=0;

        // Hide it
        $(".context-menu-ul").hide(100);
    }
 });


 // If the menu element is clicked
 $(document).on('click','.context-menu-item',function(){
    lt_debug( 'INFO|CONTEXT-ITEM='+$(this).data("ident-uuid")+'='+$(this).data("ident-hid")+'='+$(this).data("ident-value"), 4 );

    //editor.execCommand('mceRemoveNode',false, this );
    //editor.dom.remove('*[data-UUID="'+$(this).data("ident-uuid")+'"] *[data-hid="'+$(this).data("ident-hid")+'"]');

    var uuid = $(this).data("ident-uuid");
    sgstore['lock'][uuid]=0;

    //var mynode = editor.selection.getNode();
    var mynode = sgstore['contextmenu'];

    if ( mynode.nodeName == 'SPAN' && /hl[rgnybop][0-9]/.test($(mynode).attr('class')) == true ) {


        sgstore['run'].push({ 
            node: mynode, value:$(this).data("ident-value"), 
            func: function () {
                mynode=this.node;
                $( mynode ).replaceWith( this.value );
                sgcheck[ uuid ]=$(mynode).parent().text();
                sgstore['html'][ uuid ]=$(mynode).parent().html();
            }
        });
    }



//editor.dom.remove(this);

//editor.execCommand('mceReplaceContent',false,$(this).data("ident-value") );

  
    // Hide it AFTER the action was triggered
    $(".context-menu-ul").hide(100);
 });



 editor.on('PreInit', function () {
    editor.serializer.addNodeFilter('span', function (nodes) {
        var i = nodes.length;

        while (i--) {
            var node = nodes[i];

            if ( /hl[rgnybop][0-9]/.test(node.attr('class')) == true ) {
                node.unwrap();
            }


        }

    });
 });



 var lut = []; for (var i=0; i<256; i++) { lut[i] = (i<16?'0':'')+(i).toString(16); }
 function getUUID()
 {
    var d0 = Math.random()*0xffffffff|0;
    var d1 = Math.random()*0xffffffff|0;
    var d2 = Math.random()*0xffffffff|0;
    var d3 = Math.random()*0xffffffff|0;
    return lut[d0&0xff]+lut[d0>>8&0xff]+lut[d0>>16&0xff]+lut[d0>>24&0xff]+'-'+
    lut[d1&0xff]+lut[d1>>8&0xff]+'-'+lut[d1>>16&0x0f|0x40]+lut[d1>>24&0xff]+'-'+
    lut[d2&0x3f|0x80]+lut[d2>>8&0xff]+'-'+lut[d2>>16&0xff]+lut[d2>>24&0xff]+
    lut[d3&0xff]+lut[d3>>8&0xff]+lut[d3>>16&0xff]+lut[d3>>24&0xff];
 }

 function insertAt (mystr, CharToInsert,Position) {
     return mystr.slice(0,Position) + CharToInsert + mystr.slice(Position)
 }

 function lt_highlighter ( editor, myobj, myid, myclass , mystart, myend ) {
    var alist = {};

    var mytext = $(myobj).text();
    var myhtml = $(myobj).html();

    lt_debug( 'TRACE|HIGHLIGHT-HTML-PRE='+myobj+'='+myhtml+'=', 6);

    var patt = /\<.*?\>/ig;

    while (match = patt.exec(myhtml)) {
        if ( mystart >= match.index ) {
            mystart =  mystart + patt.lastIndex - match.index;
        }
 
        if ( myend > match.index ) {
            myend =  myend + patt.lastIndex - match.index;
        }
    }

    var myspan = '<span class="'+myclass+'" data-hid="'+myid+'">';

    myhtml = insertAt(myhtml, myspan,mystart);
    myhtml = insertAt(myhtml, '</span>',myend+myspan.length  );

//>var rspan = new RegExp('(('+myspan+').*?)(\<\/.*?\>)(.*?\<\/span\>)');
//>myhtml = myhtml.replace(rspan,function(match,p1,p2,p3,p4) { 
//>return p1+'</span>'+p3+''+p2+''+p4 
//>} );


    lt_debug( 'TRACE|HIGHLIGHT-HTML-POST='+ myhtml, 6 );

    $(myobj).html( myhtml );

//var astart = substr(mytext, 0, mystart).split(/[^a-zA-Z'0-9]/);



//$.each(atext, function () {


//});

 }

 function lt_lock (mode, uuid) {


 }

function lt_debug (content,level) {
    if ( lt_debugLevel >= (level||1) ) {
        console.log(content);
    }
}

 function lt_timer(mode) {
//lt_debug("mode="+mode);
    if ( mode == 1 && lastActive < (30*1000) ) {
        setTimeout(timerFunc, 100);
    } else if ( mode == 0 && lastActive >= (30*1000) ) {
        lastActive=0;
        setTimeout(timerFunc, 100);
    } else if ( mode == 0 ) {

    }

 }


});


