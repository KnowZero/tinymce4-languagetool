/**
 *
 * Copyright, KnowZero
 * Released under Apache 2.0 License.
 * Version 0.31-Alpha
 *
 * Contributing: https://github.com/KnowZero/tinymce4-languagetool
 */

(function() {

 var scriptLoader = new tinymce.dom.ScriptLoader();


 tinymce.PluginManager.add('languagetool', function(editor, url) {

 editor.on('PreInit', function () { 
    editor.serializer.addNodeFilter('span', function (nodes) {
        var i = nodes.length;

        while (i--) {
            var node = nodes[i];
            if ( /^lt-highlight(?: |-remove )/.test(node.attr('class')) == true ) {
                node.unwrap();
            }


        }

    });
 });


// Create UI Elements



var buttonMenu = [
{ text: "Find/Replace Dialog", onclick: function() { lt_issueDialog() } },
{ text: "Configuration", onclick: function() {  

    var configWindow = [];

    configWindow.push(
                                        {
                                            title: 'Ignore List',
                                            type: "form",
                                            items: [
                                                { name: 'ignore_rules', id: 'lt_ignoreRulesCfg', type: 'selectbox', size: 10, label: 'Rules', options: function() { return Object.keys( LT.getStore('ignore','rule') ) } },
                                                {
                                                    type   : 'button',
                                                    name   : 'button',
                                                    label  : ' ',
                                                    text   : 'Remove Ignoring Rule',
                                                    onclick: function() {LT.removeRule}
                                                },

                                                { name: 'ignore_words', id: 'lt_ignoreWordsCfg', type: 'selectbox', size: 10, label: 'Words', options: function() { Object.keys( LT.getStore('ignore','all') )} },

                                                {
                                                    type   : 'button',
                                                    name   : 'button',
                                                    label  : ' ',
                                                    text   : 'Remove Ignoring Word',
                                                    onclick:  function() {LT.removeWord}
                                                }

                                            ]
                                        }
    );

/*
    configWindow.push(

        {
            title: "Preferences",
            type: "form",
            items: [
                { name: 'set_language', id: 'lt_setLanguage', type: 'selectbox', size: 1, label: 'Set Language', options: [] }
            ]
        }

    );
*/


            editor.windowManager.open({
                title: 'Configuration',
                bodyType: 'tabpanel',
                body: configWindow,
                onsubmit: function(e) {


 

                }
            });


   } },
];
var buttonArgs = {
        tooltip: 'Spellcheck',
        onclick: function() {},
        type: 'menubutton',
        icon: 'spellchecker',
        menu: buttonMenu
      };


 editor.addButton('languagetool', buttonArgs);


 scriptLoader.add( url+'/include/languagetool.min.js' );


scriptLoader.loadQueue(function() {

tinymce.activeEditor.settings['lt_library_path']=url;

 var LT = new LanguageTool(tinymce.activeEditor.settings);







// Register tie functions

LT.setFunction('bookmark',function (bm) {
if ( bm == undefined ) {
return tinymce.activeEditor.selection.getBookmark();
} else {
return tinymce.activeEditor.selection.moveToBookmark(bm);
}
});

LT.setFunction('body',function () {
return tinymce.activeEditor.getBody();
});

LT.setFunction('id',function () {
return tinymce.activeEditor.id;
});

LT.setFunction('container',function () {
return '#'+tinymce.activeEditor.id+'_ifr';
});


LT.setFunction('selectnode',function () {
return tinyMCE.activeEditor.selection.getNode();
});

LT.setFunction('setundo',function (msg) {
editor.undoManager.add();
});

LT.setFunction('alert',function (msg) {
tinymce.activeEditor.windowManager.alert(msg);
});

LT.setFunction('confirm',function (msg,uuid,hid,func) {

            editor.windowManager.open({
                title: 'Confirm',
                body: [
                    {type: 'textbox', name: 'uuid', value:uuid, style: 'display:none'},
                    {type: 'label', label: msg},
                    {type: 'textbox', name: 'hid', value:hid, style: 'display:none'}   
                ],
                onsubmit: func
                });

});


LT.setFunction('setcss',function (path) {
editor.dom.loadCSS(url + path);
});



LT.setFunction('contextmenu_hide',function () {
$(tinymce.DOM.doc).find(".mce-contextmenu").hide();
});


LT.setFunction('progress_container',function () {
var statusbar = editor.theme.panel && editor.theme.panel.find('#statusbar')[0];
if (statusbar != undefined) {
return statusbar.$el;
}
});

LT.setFunction('progress_init',function () {
var statusbar = editor.theme.panel && editor.theme.panel.find('#statusbar')[0];
if (statusbar != undefined) {
 statusbar.insert({
              type: 'label',
              //icon:'spellchecker',
id: 'lt-sgcheck',
              name: 'lt-sgcheck',
              html: '<progress id="lt-progress" max="100" value="0"></progress><span id="lt-status">0 Issue(s)</span>',
              // classes:'sgcheck',
              classes: 'sgcheck ico i-spellchecker',
              disabled: editor.settings.readonly,
              onclick: function () { lt_issueDialog(); }
            }, 0);
}

});




// Register events

 editor.on('keyPress',function(e) { LT.getEvent('keypress',this,e); });
 editor.on('keyUp', function(e) { LT.getEvent('keyup',this,e); });
 editor.on('keyDown',function(e) { LT.getEvent('keydown',this,e); });

 editor.on('NodeChange', function(e) { LT.getEvent('nodechange',this,e); });
 editor.on('SetContent', function(e) { LT.getEvent('setcontent',this,e); });

 editor.on('init', function() { LT.getEvent('init');  });

 editor.on('remove', function(e) { LT.getEvent('remove',this,e); delete LT; });

 editor.on('contextmenu', function(e) { return LT.getEvent('contextmenu',this,e);  });
 editor.on('mousedown', function(e) { LT.getEvent('mousedown',this,e); });

// Paste progress
 var pasteprogress=0;
 editor.on('BeforePastePreProcess', function (e) {
    pasteprogress=Math.round(e.content.length / 1000);
    LT.setProgress(0,pasteprogress  );

 });

 editor.on('PastePostProcess', function (e) {
   LT.setProgress( pasteprogress );
 });

 // Register commands

 editor.addCommand('mceLTDisable', function () {
    LT.setStore('enabled',false);

 });

 editor.addCommand('mceLTEnable', function () {
    LT.setStore('enabled',true);
 });


// Issue Dialog



function lt_issueDialog() {

var tfilter=[];

$.each( LT.highlightList ,function(key,val){
    tfilter.push( {type: 'checkbox', id: 'lt-filter-check-'+key, text: key.charAt(0).toUpperCase() + key.slice(1), value: val, 'class': 'lt_issueFilterAllow', checked: true } );
});



            editor.windowManager.open({
                title: 'Spelling/Grammar Check',
                id: 'lt-sgDialog',
                body: [
                    { type: 'label', html: '?', id: 'lt_issueMessage' },
                   {
                    type   : 'buttongroup',
                    name   : 'buttongroup',
                    label  : '-    Action:',
                    items  : [
                        { text: 'Apply', value: 'Apply', onClick: function() { LT.setAcceptDialog();  } },
                        { text: 'Skip', value: 'Skip', onClick: function () {  LT.setSkipDialog();  } },
                        { text: 'Ignore', value: 'Ignore', onClick: function() { LT.setIgnoreDialog('once');  } },
                        { text: 'Ignore All', value: 'Ignore All', onClick: function() { LT.setIgnoreDialog('all');  } },
                        { text: 'Ignore Rule', value: 'Ignore Rule', onClick: function() { LT.setIgnoreDialog('rule');  } }
                    ]
                },
 {type: 'textbox', name: 'lt_issueChangeTo', id: 'lt_issueChangeTo', label:'Change To:', value:'' },
                    { 
type: 'selectbox', size: 10, name: 'lt_issueSuggestions', id: 'lt_issueSuggestions', 
size: 10, options: [], 
onDblClick: function(e) {  LT.setAcceptDialog( $(e.target).parent(), $(e.target).parent() ); },
onClick: function(e) { $('#lt_issueChangeTo').val($(e.target).val())  }   
                    },


{
            type: 'container',
            label  : 'Allow Filter:',
            layout: 'grid',
            'class':'lt_issueFilterGroup',
            columns: 3,
            items: tfilter
}
                ],
                onOpen: function () {  LT.nextIssue(1); },
                onClose: function(e) {

$( tinymce.activeEditor.getBody() ).find('.dialog-highlight').removeClass('dialog-highlight');
$( tinymce.activeEditor.getBody() ).find('.skip-dialog-highlight').removeClass('skip-dialog-highlight');

                }
            });


}





 });
});


}());
