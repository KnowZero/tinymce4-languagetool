/**
 *
 * Copyright, KnowZero
 * Released under Apache 2.0 License.
 * Version 0.26-Alpha
 *
 * Contributing: https://github.com/KnowZero/tinymce4-languagetool
 */

tinymce.PluginManager.add('languagetool', function(editor, url) {




 // Load Stylesheet into UI
 var css_link = $("<link>", {
    rel: "stylesheet",
    type: "text/css",
    href: url + '/css/default.css'
 });
 css_link.appendTo('head');




 // Load ContextMenu into UI
 var context_menu = $('<div id="context-menu-nav"><ul id="context-menu-ul"></ul></div>');
 context_menu.appendTo('body');






 var sgcheck = {}; // Active storage of changes
 var sgstore = { html:{}, text:{}, obj:{}, lt:{}, lock:{}, run:[], contextmenu:{}, ignore:{ once:{}, all:{}, rule:{}}, queue:[[],[],[]], dqueue:{}, iaqueue:{}, progress:[0,0,0,0], issues:{}, enabled: true  }; // Universal Storage
 var timerRunner = 0; // Timer coundown for remote url (counts upwards though)
 var lastActive=0; // Last activity for hibernation
 var lastRun=0; // Keep track of when time last ran in epoch
 var newLineCheck=0; // Check if new line has been made

 var lt_remoteUrl = editor.getParam('lt_url') || "https://languagetool.org/api/v2/check";
 var lt_remoteTimer = editor.getParam('lt_timer') || 10000; // DO NOT CHANGE UNLESS YOU USE YOUR OWN URL!



 var lt_setLanguage = editor.getParam('lt_lang') || "en-US";
 
  var lt_setMode = editor.getParam('lt_mode') || "new_sentence";
 
 var lt_setHighlight = editor.getParam('lt_highlight') || {};
 var lt_debugLevel = editor.getParam('lt_debug') || 0;
 var lt_ignoreCallback = editor.getParam('lt_ignore_callback') || function () {};
 var lt_monopolizeHighlightContextMenu = editor.getParam('lt_monopolize_highlight_contextmenu') || true;
 var lt_highlightClick = editor.getParam('lt_highlight_click') || "right";
 var lt_fullMessage = editor.getParam('lt_full_message') || false;
 var lt_showProgressBar = editor.getParam('lt_show_progress_bar') || true;
 var lt_ignoreBlockTags = editor.getParam('lt_ignore_block_tags') || {};
 var lt_ignoreSelector = editor.getParam('lt_ignore_selector');

 var lt_maxInstances = (editor.getParam('lt_max_instances') || 2);
 var lt_sizeOfInstances;
 
 var lt_inactive=0;


 if ( /\/\/languagetool\.org/i.test( lt_remoteUrl ) ) {
    lt_sizeOfInstances = editor.getParam('lt_size_of_instances') || (10*1024);
    if ( /(?:^|\.)(?:github\.io|languagetool.org)$/i.test( window.location.hostname ) ) {

    } else {
        if ( lt_remoteTimer < 10000 ) {
            lt_remoteTimer = 10000;
        }
        lt_maxInstances = 1;
        if ( lt_sizeOfInstances < (10*1024) ) {
            lt_sizeOfInstances = (10*1024);
        }
    }
 } else {
     lt_sizeOfInstances = editor.getParam('lt_size_of_instances') || (25*1024);
 }


 // Load Stylesheet into Editor DOM
 editor.on('init', function() {
    editor.dom.loadCSS(url + '/css/default.css'); 

if ( lt_showProgressBar == true ) {
var statusbar = editor.theme.panel && editor.theme.panel.find('#statusbar')[0];

 statusbar.insert({
              type: 'label',
              //icon:'spellchecker',
              name: 'lt-sgcheck',
              html: '<progress id="lt-progress" max="100" value="0"></progress><span id="lt-status">0 Issue(s)</span>',
              // classes:'sgcheck',
              classes: 'sgcheck ico i-spellchecker',
              disabled: editor.settings.readonly,
              onclick: function () { lt_issueDialog(); }
            }, 0);


}

 });

 var onInstance = 0;
 var listInstances = {};

 var timerSet = 0;

 sgstore['ignore']['all']=editor.getParam('lt_ignore_words') || {};
 sgstore['ignore']['rule']=editor.getParam('lt_ignore_rules') || {};



 lt_setHighlight['misspelling'] = lt_setHighlight['misspelling'] || "hlr1";
 lt_setHighlight['grammar'] = lt_setHighlight['grammar'] || "hlg1";
 lt_setHighlight['typographical'] = lt_setHighlight['typographical'] || "hlb1";
 lt_setHighlight['style'] = lt_setHighlight['style'] || "hln1";
 lt_setHighlight['duplication'] = lt_setHighlight['duplication'] || "hlo1";
 lt_setHighlight['inconsistency'] = lt_setHighlight['inconsistency'] || "hlp1";
 lt_setHighlight['other'] = lt_setHighlight['other'] || "hly1"; 




var buttonMenu = [
{ text: "Find/Replace Dialog", onclick: function() { lt_issueDialog() } },
{ text: "Configuration", onclick: function() {  

    var configWindow = [];

    configWindow.push(
                                        {
                                            title: 'Ignore List',
                                            type: "form",
                                            items: [
                                                { name: 'ignore_rules', id: 'lt_ignoreRulesCfg', type: 'selectbox', size: 10, label: 'Rules', options: Object.keys(sgstore['ignore']['rule']) },
                                                {
                                                    type   : 'button',
                                                    name   : 'button',
                                                    label  : ' ',
                                                    text   : 'Remove Ignoring Rule',
                                                    onclick: function(e) { 
                                                        var val = $("#lt_ignoreRulesCfg").val(); 
                                                        delete(sgstore['ignore']['rule'][val]);  
                                                        lt_ignoreCallback.call('removeRule',val);   
                                                        $("#lt_ignoreRulesCfg option:selected").remove();  
                                                    }
                                                },

                                                { name: 'ignore_words', id: 'lt_ignoreWordsCfg', type: 'selectbox', size: 10, label: 'Words', options: Object.keys(sgstore['ignore']['all']) },

                                                {
                                                    type   : 'button',
                                                    name   : 'button',
                                                    label  : ' ',
                                                    text   : 'Remove Ignoring Word',
                                                    onclick: function(e) { 
                                                        var val = $("#lt_ignoreWordsCfg").val(); 
                                                        delete(sgstore['ignore']['all'][val]);  
                                                        lt_ignoreCallback.call('removeWord',val);   
                                                        $("#lt_ignoreWordsCfg option:selected").remove();  
                                                    }
                                                }

                                            ]
                                        }
    );

/*
    configWindow.push(

        {
            title: "Preferences",
            type: "form",
            items: [
                { name: 'set_language', id: 'lt_setLanguage', type: 'selectbox', size: 1, label: 'Set Language', options: [] }
            ]
        }

    );
*/


            editor.windowManager.open({
                title: 'Configuration',
                bodyType: 'tabpanel',
                body: configWindow,
                onsubmit: function(e) {


 

                }
            });


   } },
];
var buttonArgs = {
        tooltip: 'Spellcheck',
        onclick: function() {},
        type: 'menubutton',
        icon: 'spellchecker',
        menu: buttonMenu
      };


 editor.addButton('languagetool', buttonArgs);


 // Register commands

 editor.addCommand('mceLTDisable', function () {
    sgstore['enabled']=false;
 });

 editor.addCommand('mceLTEnable', function () {
    sgstore['enabled']=true;
 });



 var timerFunc = function() {
    lt_inactive+=100;
    timerRunner+=100;
    lastActive+=100;

    $.each(sgstore['run'], function(i,val) {
        sgstore['run'][i].func();
    });
    sgstore['run']=[];

    if ( newLineCheck == 1 && (lastRun + lt_remoteTimer) < (new Date).getTime() ) {
        lt_debug('INFO|LAST RUN WITHIN TIMER',4);
        timerRunner=lt_remoteTimer;
    }

    if ( timerRunner >= lt_remoteTimer && Object.keys(listInstances).length < lt_maxInstances ) {


        $.each(sgstore['iaqueue'],function(key,val) {
            if (  lt_inactive > val[0]  ) {
                delete(sgstore['iaqueue'][key]);
                lt_queue( key,val[1],val[2],val[3] );
			 if ( val[4] != undefined ) {
			     val[4].call();
			 }
            }
        });

        $.each(sgstore['dqueue'],function(key,val) {
            if (  val[0] < (new Date).getTime()  ) {
                delete(sgstore['dqueue'][key]);
                lt_queue( key,val[1],val[2],val[3] );
			 if ( val[4] != undefined ) {
			     val[4].call();
			 }
            }
        });

        newLineCheck=0;
        timerRunner=0;

        var data = {
            text: "",
            language: lt_setLanguage
        };


        if ( editor.getParam('lt_postdata') != undefined  ) {

            $.each(editor.getParam('lt_postdata'), function (key,val) {
                data[key]=val;
            });

        }
        if ( data['disabledRules'] == undefined ) {
            data['disabledRules']=''+Object.keys(sgstore['ignore']['rule']).join(',');

        } else {
            data['disabledRules']+=','+Object.keys(sgstore['ignore']['rule']).join(',');
        }


        var tsize=0;
        var tdata={ text:'', size:0 };
 


//console.log( Object.keys(sgcheck).length + '='+sgstore['queue'][0].length + '='+sgstore['queue'][1].length );
            var tcont=1;
        $.each(sgstore['queue'], function(i) {
       sgstore['queue'][i] = $.grep(sgstore['queue'][i], function(key,i) {
   


                if ( sgstore['lock'][key] != 1 ) {
            if (  key in sgcheck  ) {

                var val=sgcheck[ key ];


                    var tval = val+"\t("+key+")\n\n";


                    if ( tcont == 1  ) {
                    var sval=val.replace(/\s/g,'')
                    if ( sval.length >= 2 && val != sgstore['text'][key] && $(sgstore['obj'][key]).data('UUID') == key ) {
                    if ( tdata['text'] == '' || (tdata['text'].length+tval.length) < lt_sizeOfInstances ) {
                        tdata['text']=tdata['text']+tval;
                        tsize++;  

                    } else {
                        newLineCheck=1;
                        
                        tcont=0;
                    }
                    } else {
                    delete(sgcheck[key]);
                    lt_progress_bar(3);
                    return false;

                    }
                    }
               
               
                if ( tcont == 1 ) {

                    sgstore['text'][key] = '' + sgcheck[key];
                    delete(sgcheck[key]);
                    lt_progress_bar(1);
                    return false;
                }
                lastActive=0;
                
            } else {
                    lt_progress_bar(3);
                    return false;
            }

            }
            return true;
        });
        });
//console.log( Object.keys(sgcheck).length + '='+sgstore['queue'][0].length + '='+sgstore['queue'][1].length );
        lt_debug(sgstore['queue'],5);

        





        lt_debug( "INFO|SENT-TEXT="+data['text'], 4 );

        if ( tdata['text'] != '' ) {

            var ikey=getUUID();
            listInstances[ikey]=tdata;

            data['text']=listInstances[ ikey ]['text']; 
            lastRun = (new Date).getTime();
            $.ajax({
                type: "POST",
                url: lt_remoteUrl,
                data: data,
                indexValue: { text: data['text'], tsize: tsize, ikey: ikey  },
                //contentType: "multipart/form-data"
                dataType: "json",
                success: function(data){


                sgstore['run'].push({
                    data: data, 
                    text: this.indexValue.text, 
                    tsize: this.indexValue.tsize, 
                    ikey: this.indexValue.ikey,
                    func: function () {
                    lt_progress_bar(this.tsize);

                    var json = this.data;
                    var mytext = this.text;

                    var uuidcount={};
                    var bookmark = editor.selection.getBookmark();



 
                    mytext.replace(/\t\(([a-f0-9-]{36})\)\n\n/,function (pmatch,p1) { 
                        var tempid = p1; 

                        var temphtml = lt_clearHighlighter( lt_text($(sgstore['obj'][tempid]).html()) );


                        $(sgstore['obj'][tempid]).html( temphtml );

                        return pmatch; 
                    });


                    var fmatch={};
                    var locklist={};

                    $.each(json['matches'],function(i,item) {

                        var hclass = lt_setHighlight['other'];

                        if ( lt_setHighlight[ item['rule']['issueType'] ] != undefined ) {
                            hclass = lt_setHighlight[ item['rule']['issueType'] ];
                        }


                        var tempstr = mytext.substr( item['offset'] );

                        

                        var uuid;
                        var templen;

                        var tempword;



                        var tempword = tempstr.substr( 0, item['length'] );





                        tempstr.replace(/(?:^|\n)(.*?\t)\(([a-f0-9-]{36})\)\n/,function (pmatch,p1,p2) {  uuid = p2; return pmatch; });
                        
                        mytext.replace( new RegExp(".*\\([a-f0-9-]{36}\\)(?:\n\n)([^\\t]+?\\t\\("+uuid+"\\))\n\n"),function(pmatch,p1) {   templen=mytext.indexOf(p1); return pmatch;  } );
                        if (templen == undefined) {
                            templen=0;
                        }
                        //console.log(uuid+'|'+templen+'|'+mytext);

                        lt_debug('INFO|WORD='+tempword+'|OFFSET='+item['offset']+'|LEN='+item['length']+'|ADJLEN='+templen,4);

                        if ( uuid != undefined && sgstore['ignore']['all'][tempword] == undefined && (sgstore['ignore']['once'][uuid] == undefined || sgstore['ignore']['once'][uuid][tempword] == undefined) )  {




                            item['offset']-=templen;
                            lt_debug( "TRACE|OFFSET="+item['offset']+'='+templen, 6 );

                            if ( fmatch[ uuid ] == undefined ) {
                                sgstore['lt'][ uuid ]={};
                                fmatch[ uuid ]=1;

                            }

                            sgstore['lt'][ uuid ][i]=item;
                            sgstore['lt'][ uuid ][i]['word']=tempword;

                            lt_applyHighlighter( editor, sgstore['obj'][ uuid ], i, tempword, item['rule']['id'], hclass, item['offset'], item['offset']+item['length']  );
                            locklist[ uuid ]=1;


                        }

                    });


                    $.each(locklist,function (key,val) {
                        lt_lock(0, key );
                    });


                    editor.selection.moveToBookmark(bookmark); 


   
                    delete(listInstances[ this.ikey ]);
                    lt_progress_bar(this.tsize);

                    }

                    

                    });

                },
                failure: function(errMsg) {

                    delete(listInstances[ this.indexValue.ikey ]);

                    lt_debug('ERROR|'+errMsg,2);
                }
            });
        }


    }
 timerSet=0;
 lt_timer(1);

 };


 lt_timer(1);



 editor.on('BeforePastePreProcess', function (e) {
    sgstore['progress'][3]=Math.round(e.content.length / 1000);
    lt_progress_bar(0, sgstore['progress'][3]  );

 });

 editor.on('PastePostProcess', function (e) {
   lt_progress_bar( sgstore['progress'][3] );
 });


 editor.on('keyUp', function(e) {
 
 lt_inactive=0;

var key = e.which || e.keyCode || 0;


if ( !(key >= 37 && key <= 40) ) {
    var mynode = editor_selectnode();

var mypnode=lt_find_parent_node(mynode);

var posCaret=getCaretOffset( mypnode );
var posSearch=0;

$.each(mypnode.childNodes, function(i,cnode) {

var tlength=$(cnode).text().length;

    if (cnode != undefined && cnode.nodeName == 'SPAN' && $(cnode).data('hid') != undefined ) {

        if ( posCaret == posSearch || (key == 46 && posCaret+1 == posSearch) || posCaret == posSearch+tlength || (key == 8 && posCaret-1 == posSearch) ) {

      var uuid = $(mypnode).data('UUID');
var bm = editor_bookmark();
        $( cnode ).replaceWith( $(cnode).html() );
editor_bookmark(bm);


 
        }
    }

posSearch+=tlength;


});

if ( posSearch != posCaret ) {
lt_inactive_queue( $(mynode).data('UUID'), mypnode, 0, 1, 2000);
}


}



 });





 editor.on('keyDown',function(e) {

 var key = e.which || e.keyCode || 0;










    var mynode = editor_selectnode();





if ( !(key >= 37 && key <= 40) ) {
    if (mynode.nodeName == 'SPAN' && $(mynode).data('hid') != undefined ) {
        var mypnode=lt_find_parent_node(mynode);
        var uuid = $(mypnode).data('UUID');
        var bm = editor_bookmark()
        $( mynode ).replaceWith( $(mynode).html() );
        editor_bookmark(bm);
        

    }

}

    if ( key == 13 ) {
        //var mynode = editor_selectnode();

        var mypnode=lt_find_parent_node(mynode);
        var uuid = $(mypnode).data('UUID');
    
        lt_debug('INFO|ENTER='+uuid+'|'+mynode.nodeName,4);
    
        lt_queue( uuid, mypnode, 0, 1 );


        if ( $(mynode).data('hid') != undefined ) {
            $(mynode).removeData('hid');
            $(mynode).removeClass();
            $(mynode).addClass('lt-highlight-remove');
            //$(mynode).addClass('hlt1');
        }

    }

 });


 editor.on('keyPress',function(e) {

    var key = e.which || e.keyCode || 0;

    if ( key == 46  // .
        || key == 33    // !
        || key == 63    // ?
    ) { 
        var mynode = editor_selectnode();

        var mypnode=lt_find_parent_node(mynode);


        var uuid = $(mypnode).data('UUID');

        lt_debug('INFO|ENDSENT='+mypnode.nodeName+'|'+mynode.nodeName+'|'+uuid,4);



        lt_queue( uuid, mypnode, 0, 1 );


            if ( $(mynode).data('hid') != undefined ) {
                $(mynode).removeData('hid');
                $(mynode).removeClass();
                $(mynode).addClass('lt-highlight-remove');
                //$(mynode).addClass('hlt1');
            }

        } else if ( key == 32 // SPACE
            || key == 44  // ,
        ) { 

if ( lt_setMode == 'new_word' ) {
        var mynode = editor_selectnode();

        var mypnode=lt_find_parent_node(mynode);


        var uuid = $(mypnode).data('UUID');

        lt_debug('INFO|ENDSENT='+mypnode.nodeName+'|'+mynode.nodeName+'|'+uuid,4);



        lt_queue( uuid, mypnode, 0, 1 );


            if ( $(mynode).data('hid') != undefined ) {
                $(mynode).removeData('hid');
                $(mynode).removeClass();
                $(mynode).addClass('lt-highlight-remove');
                //$(mynode).addClass('hlt1');
            }

}

    }

 });


var lastnode;

 editor.on('NodeChange', function(e) {
    lt_timer(0); // Resume if idle

    var mynode = e.element;




    var mypnode=lt_find_parent_node(mynode);
    
    
    if ( lt_ignoreSelector != undefined && $(mynode).is( lt_ignoreSelector )   ) {
		return;
    }

    var uuid = $(mypnode).data('UUID');

    lt_debug('TRACE|NODECHANGE=' + mynode.nodeName + '=' + uuid ,6);

    if ( mypnode.id == 'mcepastebin' ) {

        return;

    }


    if ( uuid == undefined ) {
        uuid = setUUID(mypnode);

    }

    if (  $(mypnode).is(lastnode) ) {
        
    } else {



        var lastuuid = $(lastnode).data('UUID');

    lt_queue( lastuuid, lastnode, 0, 0 );
    //sgcheck[ lastuuid ]=lt_text($(lastnode).text());
    //sgstore['obj'][ lastuuid ]=lastnode;
    //sgstore['html'][ lastuuid ]=lt_text($(lastuuid).html());
    lastnode = mypnode;

    lt_debug('DEBUG|PNODE='+mypnode.nodeName+'='+uuid+'|NODE='+mynode.nodeName+'='+lt_text($(mypnode).text())+'|LEN='+lt_text($(mypnode).text()).length , 5 );

    }
 });



 editor.on('SetContent', function(e) {

    
    lt_new_content_process(e);


 });

 editor.on('GetContent', function(e) {
    lt_debug('INFO|GETCONT='+e, 4);
 });


 editor.on('mousedown', function(e) {

   
//console.log(e.which);

    if (!$(e.target).parents("#context-menu-nav").length > 0) {
        $("#context-menu-nav").hide(100);
    }

    if ( lt_highlightClick == 'left' && e.which == 1 ) {
        lt_openContextMenu(e);
    }


 });

 $(document).bind("mousedown", function (e) {
    
    // If the clicked element is not the menu
    if (!$(e.target).parents("#context-menu-nav").length > 0) {
       
        var uuid = $(this).data("ident-uuid");
        lt_debug( 'TRACE|CONTEXT-MENU-NOTCLICK=UUID='+uuid, 6 );
        sgstore['lock'][uuid]=0;

        // Hide it
        $("#context-menu-nav").hide(100);
    }
 });




 editor.on('contextmenu', function(e) {
 if ( lt_highlightClick == 'right' ) {

        
        if (  lt_monopolizeHighlightContextMenu == true && lt_openContextMenu(e) == 1 ) {
            $(tinymce.DOM.doc).find(".mce-contextmenu").hide();
            return false;
        }


    
 }
 });



 // If the menu element is clicked
 $(document).on('click','.context-menu-item',function() {

    lt_contextMenuClick( $(this).data("ident-uuid"), $(this).data("ident-hid"), $(this).data("ident-value") );





//editor.dom.remove(this);

//editor.execCommand('mceReplaceContent',false,$(this).data("ident-value") );

  
    // Hide it AFTER the action was triggered
    $("#context-menu-nav").hide(100);



 });


 // If the menu element is clicked
 $(document).on('click','.context-menu-ignore',function(){
    lt_debug( 'INFO|CONTEXT-IGNORE='+$(this).data("ident-uuid")+'='+$(this).data("ident-hid")+'='+$(this).data("ident-value"), 4 );


    lt_contextMenuIgnore( $(this).data("ident-uuid"), $(this).data("ident-hid"), $(this).data("ident-value") );

	//editor.undoManager.add();

 
  
    // Hide it AFTER the action was triggered
    $("#context-menu-nav").hide(100);



 });


 editor.on('PreInit', function () {
    editor.serializer.addNodeFilter('span', function (nodes) {
        var i = nodes.length;

        while (i--) {
            var node = nodes[i];
            if ( /^lt-highlight(?: |-remove )/.test(node.attr('class')) == true ) {
                node.unwrap();
            }


        }

    });
 });



 var lut = []; for (var i=0; i<256; i++) { lut[i] = (i<16?'0':'')+(i).toString(16); }
 function getUUID()
 {
    var d0 = Math.random()*0xffffffff|0;
    var d1 = Math.random()*0xffffffff|0;
    var d2 = Math.random()*0xffffffff|0;
    var d3 = Math.random()*0xffffffff|0;
    return lut[d0&0xff]+lut[d0>>8&0xff]+lut[d0>>16&0xff]+lut[d0>>24&0xff]+'-'+
    lut[d1&0xff]+lut[d1>>8&0xff]+'-'+lut[d1>>16&0x0f|0x40]+lut[d1>>24&0xff]+'-'+
    lut[d2&0x3f|0x80]+lut[d2>>8&0xff]+'-'+lut[d2>>16&0xff]+lut[d2>>24&0xff]+
    lut[d3&0xff]+lut[d3>>8&0xff]+lut[d3>>16&0xff]+lut[d3>>24&0xff];
 }

 function setUUID (mynode) {

    if ( (lt_ignoreBlockTags[mynode.nodeName]||0) == 0 && (lt_ignoreSelector == undefined || (lt_ignoreSelector != undefined && !($(mynode).is( lt_ignoreSelector )))) ) {

        var uuid = getUUID();
        $(mynode).data('UUID', uuid);

        return uuid;
    }

 }

 function insertAt (mystr, CharToInsert,Position) {
     return mystr.slice(0,Position) + CharToInsert + mystr.slice(Position)
 }



 function lt_clearHighlighter (content) {

    var temphtml= content.replace(/<span class="lt-highlight(?:-remove|)[\w \-]+?" data-hid="[0-9]+" data-word="[a-zA-Z0-9\/=+]+" data-rule="[a-zA-Z0-9_]+">(.*?)<\/span>/g, function(match,p1) { return p1; });
    lt_debug('TRACE|CLEAR='+temphtml,6);
    return temphtml;

 }

 function lt_applyHighlighter ( editor, myobj, myid, myword, myrule, myclass , mystart, myend ) {
    var alist = {};

  //  var thtemp = lt_textHTML(myobj);

 //   var mytext=thtemp['text'];
 //   var myhtml=thtemp['html'];

    var mytext = lt_text($(myobj).text());
    var myhtml = lt_text($(myobj).html());

    lt_debug( 'TRACE|HIGHLIGHT-HTML-PRE='+myobj+'='+myhtml+'=', 6);

    var patt = /(\<.*?\>)|&(?:nbsp|amp|quot|copy|reg|[gl]t|\#[0-9a-f]+);/ig;

    while (match = patt.exec(myhtml)) {
        var topt;

        if ( match[0].substr(0,3) == '<br' ) {

        topt = patt.lastIndex - match.index - 1;

        } else 
        if (match[0].substr(0,1) == '<') {

        topt = patt.lastIndex - match.index;
        } else {
        topt= patt.lastIndex - match.index - 1;
        }

        if ( mystart >= match.index ) {
            mystart =  mystart + topt;
        }
 
        if ( myend > match.index ) {
            myend =  myend + topt;
        }

    }

    var myspan = '<span class="lt-highlight '+myclass+'" data-hid="'+myid+'" data-word="'+window.btoa( encodeURIComponent(myword) )+'" data-rule="'+myrule+'">';

    myhtml = insertAt(myhtml, myspan,mystart);
    myhtml = insertAt(myhtml, '</span>',myend+myspan.length  );

var ddup = new RegExp('</(EM|STRONG|SUP|SUB)><\\1>','i');
myhtml = myhtml.replace(ddup,'');

//>var rspan = new RegExp('(('+myspan+').*?)(\<\/.*?\>)(.*?\<\/span\>)');
//>myhtml = myhtml.replace(rspan,function(match,p1,p2,p3,p4) { 
//>return p1+'</span>'+p3+''+p2+''+p4 
//>} );


    lt_debug( 'TRACE|HIGHLIGHT-HTML-POST='+ myhtml, 6 );

    $(myobj).html( myhtml );

//var astart = substr(mytext, 0, mystart).split(/[^a-zA-Z'0-9]/);



//$.each(atext, function () {


//});

 }

 function lt_lock (mode, uuid) {


 }


function lt_text (str) {


str=encodeURIComponent(str);
var reg = /\%EF\%BB\%BF/g;

return decodeURIComponent(str.replace(reg, ''));

}

function lt_textHTML(mynode) {
 var tnode = $('<div />');

 var thtml = ($(mynode).html()||'').replace(/<br/gi,'\n<br');
 //thtml = ($(mynode).html()||'').replace(/&nbsp\;/gi,' ');
 $(tnode).html( thtml );

 var ttext = encodeURIComponent( $(tnode).text() );
 thtml = encodeURIComponent( thtml );
var reg = /\%EF\%BB\%BF/g;

return {  html: decodeURIComponent(thtml.replace(reg, '')), text: decodeURIComponent(ttext.replace(reg, ''))  };


}

function lt_debug (content,level) {
    if ( lt_debugLevel >= (level||1) ) {
        console.log(content);
    }
}

 function lt_timer(mode) {
//lt_debug("mode="+mode);
    if ( mode == 1 && lastActive < (30*1000) && timerSet == 0 ) {
        timerSet=1;
        setTimeout(timerFunc, 100);
    } else if ( mode == 0 && lastActive >= (30*1000) && timerSet == 0 ) {
        timerSet=1;
        lastActive=0;
        setTimeout(timerFunc, 100);
    } else if ( mode == 0 ) {

    }

 }

 function lt_find_parent_node (mynode) {
    

    if ( mynode.nodeName == 'HTML' || mynode.nodeName == 'BODY' ) {
        return {};
    }
  
    var mypnode = mynode;
    
      var nodeExc = { "TABLE":1, "TBODY":1, "TR":1, "TH":1  };

    var pfind = 0;
    while ( pfind != 1 ) {


        //if ( mynode.nodeName == 'STRONG' || mynode.nodeName == 'EM' || (mynode.nodeName == 'SPAN' && /hl[rgnybop][0-9]/.test($(mynode).attr('class')) == false ) ) {
        if ( $(mypnode).data('UUID') == undefined ) {        


            if ( $(mypnode).css('display') != 'inline' && (lt_ignoreBlockTags[mynode.nodeName]||0) == 0 && (nodeExc[mynode.nodeName]||0) == 0 &&  (lt_ignoreSelector == undefined || (lt_ignoreSelector != undefined && !($(mynode).is( lt_ignoreSelector )))) ) {
		  
		     var uuid=setUUID( mypnode );
                return mypnode;
            } else if  ( mypnode.parentNode.nodeName == 'BODY' ) {
                var uuid=setUUID( mypnode );
                return mypnode;
			 
			 
            } else {
                mypnode = mypnode.parentNode
            }
	   

        } else {
            pfind=1;
        }
    }
    return mypnode;
 }




 function lt_new_content_process (e) {

    var pnode = editor_body();

    lt_debug('TRACE|SETBODY='+$(pnode).html(),6);

    //$(pnode).children().each(function () {
    $(pnode).find("*").each(function() {

    var mynode=this;

    var nodeExc = { "TABLE":1, "TBODY":1, "TR":1, "TH":1  };

 

    if ( $(mynode).css('display') == 'inline' || (lt_ignoreBlockTags[mynode.nodeName]||0) == 1 || nodeExc[mynode.nodeName] == 1 ||   (lt_ignoreSelector != undefined && $(mynode).is( lt_ignoreSelector ))  ) {




    } else {

        var tcontinue = 0;
        $.each(mynode.childNodes,function (i,cnode) {

            if ( cnode.nodeType == 3 ) {
                tcontinue=1;
            } else if ( cnode.nodeType == 1 && $(cnode).css('display') == 'inline' ) {
                tcontinue=1;
            }

        });

        if ( tcontinue == 1 ) {

            var uuid = $(mynode).data('UUID');
            lt_debug("INFO|SET CONTENT="+mynode.nodeName+"="+uuid,  4);

            if ( uuid == undefined ) {
                uuid=setUUID(mynode);

                lt_debug("TRACE|SET CONTENT2="+mynode.nodeName+"="+uuid+"="+$(mynode).html(),  4);

                lt_queue(uuid,mynode,1,0);


            }   else if ( $(mynode).is(lastnode) ) {
                lt_queue(uuid,mynode,1,0);

            }
        
        }

}

 });

 }


 function lt_openContextMenu (e) {

    var mynode = e.target;
    var mypnode = mynode.parentNode;

    var nfind = 0;


    //if ( mypnode.nodeName == 'BODY' || mynode.nodeName == 'HTML' ) {
    //    return;
    //}




    var mypnode=lt_find_parent_node(mynode);

    var nodeExc = { "STRONG":1, "EM":1, "SUP":1, "SUB":1, "I":1, "B":1, "U":1  };

    while ( nfind != 1 ) {
        if ( nodeExc[mynode.nodeName] == 1 || (mynode.nodeName == 'SPAN' && $(mynode).hasClass('lt-highlight') == false && $(mynode).hasClass('lt-highlight-remove') == false ) ) {
 
            mynode = mynode.parentNode;
        } else {
            nfind=1;
        }
    }


    lt_debug('TRACE|CONTEXT-MENU='+mynode.nodeName , 6 );



    if ( $(mynode).hasClass('lt-highlight') == true ) {
        sgstore['contextmenu']=mynode;

        var uuid = $(mypnode).data('UUID');
        sgstore['lock'][uuid]=1;

        var hid = $(mynode).data('hid');

        lt_debug('INFO|CONTEXT-MENU-NEW='+mynode.nodeName+'|'+uuid+'='+hid+'|' , 4 );
        e.preventDefault();

        $("#context-menu-ul").empty();   

  

        $("#context-menu-ul").append(
            $('<li/>', {
                "html": ( (sgstore['lt'][uuid][hid]['shortMessage'] == '' || lt_fullMessage == true ) ? sgstore['lt'][uuid][hid]['message']:sgstore['lt'][uuid][hid]['shortMessage']),
                "class":"context-menu-header"
            })
        );

        var countSuggestions = 0;
        $.each(sgstore['lt'][uuid][hid]['replacements'],function(key,val) {

            if ( countSuggestions < 10 ) {
                $("#context-menu-ul").append(
                    $('<li/>', {
                        "html": val['value'],
                        "class":"context-menu-item",
                        "data-ident-uuid": uuid,
                        "data-ident-hid": hid,
                        "data-ident-value": val['value']
                    })
                );
            } else {

                if ( countSuggestions == 10 ) {
                    $("#context-menu-ul").append(
                        $('<li/>', {
                            "html": "More...<ul id='context-submenu-ul'></ul>",
                            "id":"context-menu-item-list",
                            "data-ident-uuid": uuid,
                            "data-ident-hid": hid,
                            "data-ident-value": val['value']
                        })
                    );
                }
                $("#context-submenu-ul").append(
                    $('<li/>', {
                        "html": val['value'],
                        "class":"context-menu-item",
                        "data-ident-uuid": uuid,
                        "data-ident-hid": hid,
                        "data-ident-value": val['value']
                    })
                );
            }
            countSuggestions++;

        });    


        $("#context-menu-ul").append(
            $('<li/>', {
                "html": "-",
                "class":"context-menu-break",

            })
        );

        $("#context-menu-ul").append(
            $('<li/>', {
                "html": "Ignore Once",
                "class":"context-menu-ignore",
                "data-ident-uuid": uuid,
                "data-ident-hid": hid,
                "data-ident-value": "once"
            })
        );

        $("#context-menu-ul").append(
            $('<li/>', {
                "html": "Ignore All",
                "class":"context-menu-ignore",
                "data-ident-uuid": uuid,
                "data-ident-hid": hid,
                "data-ident-value": "all"
            })
        );
        $("#context-menu-ul").append(
            $('<li/>', {
                "html": "Ignore Rule",
                "class":"context-menu-ignore",
                "data-ident-uuid": uuid,
                "data-ident-hid": hid,
                "data-ident-value": "rule"
            })
        );


        var pageX = e.clientX + $('#'+editor_id()+'_ifr').offset().left;
        var pageY = e.clientY + $('#'+editor_id()+'_ifr').offset().top;

        var mwidth = $("#context-menu-nav").width();
        var mheight =$("#context-menu-nav").height();
        var screenWidth = $(window).width();
        var screenHeight = $(window).height();

        $("#context-submenu-ul").removeClass('context-submenu-ul-right');
        $("#context-submenu-ul").addClass('context-submenu-ul-left');
        $("#context-submenu-ul").removeClass('context-submenu-ul-bottom');
        $("#context-submenu-ul").addClass('context-submenu-ul-top');


        var scrTop = $(window).scrollTop();
        lt_debug( "DEBUG|1="+pageX+"="+pageY+'='+$('#'+editor_id()+'_ifr').contents().scrollTop()+'='+$('#'+editor_id()+'_ifr').offset().top+'='+e.clientY, 5 );
        // right of window
        if(pageX+mwidth > screenWidth){

            pageX = (pageX-mwidth);
            $("#context-submenu-ul").removeClass('context-submenu-ul-left');
            $("#context-submenu-ul").addClass('context-submenu-ul-right');
        }

        // bottom of window
        if(pageY+mheight > screenHeight+scrTop){

            pageY = pageY-mheight ;
            $("#context-submenu-ul").removeClass('context-submenu-ul-top');
            $("#context-submenu-ul").addClass('context-submenu-ul-bottom');
        }


        lt_debug( "DEBUG|2="+pageX+"="+pageY, 5 );




        $("#context-menu-nav").finish().toggle(100).
        css({
            top: pageY + "px",
            left: pageX + "px"
        });

        return 1;
    }

    return 0;

 }

 function lt_progress_bar (prog, maxprog) {




 
    if ( maxprog != undefined ) {
    sgstore['progress'][1]+=maxprog;

//    $('#lt-progress').attr('max', sgstore['progress'][1] );
    }
    if ( prog > 0 ) {
    sgstore['progress'][0]+=prog;
    if ( sgstore['progress'][0]  >= (sgstore['progress'][1] / 20) * (sgstore['progress'][2]+1) ) {

if ( sgstore['progress'][0] == sgstore['progress'][1] ) {
sgstore['progress']=[0,0,0,0];
} else {
  

// $('#lt-progress').val( sgstore['progress'][0] );
    sgstore['progress'][2]++;
}


if ( lt_showProgressBar == true ) {

var progress_status =  editor.theme.panel.find('#lt-sgcheck')[0].$el;

 var progress_bar = $(progress_status).find('progress');
$(progress_bar).attr('max', sgstore['progress'][1] );
$(progress_bar).val( sgstore['progress'][0] );


    var progress_issues = $(progress_status).find('span');

    $(progress_issues).html( $(editor_body()).find('.lt-highlight').length + ' Issue(s)'  );

}


    lt_debug( 'INFO|PROGRES='+sgstore['progress'][0]+'/'+sgstore['progress'][1], 4 );
    }




    }

 }

 function lt_queue (uuid, mynode, qlvl, newline) {
    if ( sgstore['enabled'] == true && uuid != undefined ) {
        var thtemp = lt_textHTML(mynode);
        sgcheck[ uuid ]=thtemp[ 'text' ];
        sgstore['html'][ uuid ]=thtemp[ 'html' ];
        //sgcheck[ uuid ]=lt_text($(mynode).text());
        sgstore['obj'][ uuid ]=mynode;
        //sgstore['html'][ uuid ]=lt_text($(mynode).html());

        lt_progress_bar(0,3);
        sgstore['queue'][qlvl].push(uuid);
        if ( (newline||0) > 0 ) {
            newLineCheck=newline;
        }
        lt_timer(0); // Resume if idle
    }
 }


 function lt_delayed_queue ( uuid, mynode, qlvl, newline, delaytimer, func ) {
    sgstore['dqueue'][uuid]=[ ((new Date).getTime()+delaytimer) , mynode, qlvl, newline, func ];
 }
 
  function lt_inactive_queue ( uuid, mynode, qlvl, newline, delaytimer, func ) {
    if ( sgstore['iaqueue'][uuid] == undefined ) {
    sgstore['iaqueue'][uuid]=[ delaytimer , mynode, qlvl, newline, func ];
    }
 }


function lt_issueDialog() {

var tfilter=[];

$.each(lt_setHighlight,function(key,val){
    tfilter.push( {type: 'checkbox', id: 'lt-filter-check-'+key, text: key.charAt(0).toUpperCase() + key.slice(1), value: val, 'class': 'lt_issueFilterAllow', checked: true } );
});



            editor.windowManager.open({
                title: 'Spelling/Grammar Check',
                id: 'lt-sgDialog',
                body: [
                    { type: 'label', html: '?', id: 'lt_issueMessage' },
                   {
                    type   : 'buttongroup',
                    name   : 'buttongroup',
                    label  : '-    Action:',
                    items  : [
                        { text: 'Apply', value: 'Apply', onClick: function() { lt_contextMenuClick( $('#lt_issueSuggestions').data('ident-UUID'), $('#lt_issueSuggestions').data('ident-HID'), $('#lt_issueChangeTo').val(), 1 );  } },
                        { text: 'Skip', value: 'Skip', onClick: function () {  $(sgstore['contextmenu']).removeClass('dialog-highlight').addClass( 'skip-dialog-highlight' ); lt_nextIssue();  } },
                        { text: 'Ignore', value: 'Ignore', onClick: function() { lt_contextMenuIgnore( $('#lt_issueSuggestions').data('ident-UUID'), $('#lt_issueSuggestions').data('ident-HID'), 'once', 1 );  } },
                        { text: 'Ignore All', value: 'Ignore All', onClick: function() { lt_contextMenuIgnore( $('#lt_issueSuggestions').data('ident-UUID'), $('#lt_issueSuggestions').data('ident-HID'), 'all', 1 );  } },
                        { text: 'Ignore Rule', value: 'Ignore Rule', onClick: function() { lt_contextMenuIgnore( $('#lt_issueSuggestions').data('ident-UUID'), $('#lt_issueSuggestions').data('ident-HID'), 'rule', 1 );  } }
                    ]
                },
 {type: 'textbox', name: 'lt_issueChangeTo', id: 'lt_issueChangeTo', label:'Change To:', value:'' },
                    { 
type: 'selectbox', size: 10, name: 'lt_issueSuggestions', id: 'lt_issueSuggestions', 
size: 10, options: [], 
onDblClick: function(e) {   lt_contextMenuClick( $(e.target).parent().data('ident-UUID') , $(e.target).parent().data('ident-HID'), $(e.target).parent().val(), 1 );  },
onClick: function(e) { $('#lt_issueChangeTo').val($(e.target).val())  }   
                    },


{
            type: 'container',
            label  : 'Allow Filter:',
            layout: 'grid',
            'class':'lt_issueFilterGroup',
            columns: 3,
            items: tfilter
}
                ],
                onOpen: function () { lt_nextIssue(1); },
                onClose: function(e) {

$(editor_body()).find('.dialog-highlight').removeClass('dialog-highlight');
$(editor_body()).find('.skip-dialog-highlight').removeClass('skip-dialog-highlight');

                }
            });


}

function lt_nextIssue (firstOpen) {

    var mynode = $(editor_body()).find('.lt-highlight').not('.skip-dialog-highlight').get(0);

if (mynode == undefined) {

$('#lt_issueSuggestions').empty();

tinymce.activeEditor.windowManager.alert('Done!');

} else {

    $(mynode).addClass( 'dialog-highlight' );


    
    var mypnode=lt_find_parent_node(mynode);
    var uuid = $(mypnode).data('UUID');
    var hid = $(mynode).data('hid');

if ( (firstOpen||0) == 0 ) {

if ( $('#lt-filter-check-'+sgstore['lt'][uuid][hid]['rule']['issueType']+'[aria-checked="false"]').length == 1 ) {
 $(mynode).removeClass('dialog-highlight').addClass( 'skip-dialog-highlight' );
lt_nextIssue();
return false;
}
}



$('#lt_issueSuggestions').empty();



$('#lt_issueMessage').text( '[' + sgstore['lt'][uuid][hid]['rule']['issueType'].charAt(0).toUpperCase() + sgstore['lt'][uuid][hid]['rule']['issueType'].slice(1) + '] ' + sgstore['lt'][uuid][hid]['message'] );

  $.each(sgstore['lt'][uuid][hid]['replacements'],function(key,val) {

$('#lt_issueSuggestions').data('ident-UUID', uuid);
$('#lt_issueSuggestions').data('ident-HID', hid);

if ( (key == 0) ) {
$('#lt_issueChangeTo').val( val['value'] );
}

$('#lt_issueSuggestions').append(

                    $('<option/>', {
                        value: val['value'],
                        text: val['value'],
                        selected: ( (key == 0) ? true:false )
                    })

);
  });
sgstore['contextmenu']=mynode;



$(mynode).get(0).scrollIntoView();
//tinyMCE.activeEditor.selection.setCursorLocation(mynode,0);

}


}



function lt_contextMenuClick(uuid,hid,value,mode) {

    lt_debug( 'INFO|CONTEXT-ITEM='+uuid+'='+hid+'='+value, 4 );

	editor.undoManager.add();

    //editor.execCommand('mceRemoveNode',false, this );
    //editor.dom.remove('*[data-UUID="'+$(this).data("ident-uuid")+'"] *[data-hid="'+$(this).data("ident-hid")+'"]');

    //var uuid = $(this).data("ident-uuid");
    sgstore['lock'][uuid]=0;

    //var mynode = editor.selection.getNode();
    var mynode = sgstore['contextmenu'];

    if ( mynode.nodeName == 'SPAN' && $(mynode).hasClass('lt-highlight') == true ) {


        sgstore['run'].push({ 
            node: mynode, value:value, mode:mode,
            func: function () {
                mynode=this.node;
                $( mynode ).replaceWith( this.value );

    if (lt_showProgressBar == true) {
    var progressbar = $(editor.theme.panel.find('#lt-sgcheck')[0].$el).find('span');

    $(progressbar).html( $(editor_body()).find('.lt-highlight').length + ' Issue(s)'  );
    }
                
                lt_queue( uuid, $(mynode).parent(), 0, 0  );
                //sgcheck[ uuid ]=lt_text($(mynode).parent().text());
                //sgstore['html'][ uuid ]=lt_text($(mynode).parent().html());
                if ( (this.mode||0) == 1 ) {
                lt_nextIssue();
                }

            

            }
        });
    }


}

function lt_contextMenuIgnore (uuid,hid,value,mode) {





 //  var uuid = $(this).data("ident-uuid");
 //   var hid = $(this).data("ident-hid");
    sgstore['lock'][uuid]=0;

    //var mynode = editor.selection.getNode();
    var mynode = sgstore['contextmenu'];

    if ( mynode.nodeName == 'SPAN' && $(mynode).hasClass('lt-highlight') == true ) {



        if ( value == 'once' ) {
            if ( sgstore['ignore']['once'][uuid] == undefined ) {
                sgstore['ignore']['once'][uuid]={};
            }


            sgstore['ignore']['once'][uuid][sgstore['lt'][uuid][hid]['word']]=1;

            var mynode = sgstore['contextmenu'];

            if ( mynode.nodeName == 'SPAN' && $(mynode).hasClass('lt-highlight') == true ) {


                sgstore['run'].push({ 
                    node: mynode, mode:mode,
                    func: function () {
                        mynode=this.node;
                        $( mynode ).replaceWith( $(mynode).html() );

                        lt_queue( uuid, $(mynode).parent(), 0, 0  );
                if ( (this.mode||0) == 1 ) {
                lt_nextIssue();
                }

                        //sgcheck[ uuid ]=lt_text($(mynode).parent().text());
                        //sgstore['html'][ uuid ]=lt_text($(mynode).parent().html());
                    }
                });
            }


        } else if ( value == 'all' ) {
            lt_debug('INFO|IGNORE-ALL='+sgstore['lt'][uuid][hid]['word'], 4  );
            sgstore['ignore']['all'][sgstore['lt'][uuid][hid]['word']]=1;

            sgstore['run'].push({ 
                node: mynode, mode:mode,
                func: function () {

                    $(editor_body()).find( 'span[data-word="'+window.btoa( encodeURIComponent(sgstore['lt'][uuid][hid]['word']) )+'"]' ).each(function () {
                        $(this).replaceWith( $(this).html() );

                    });

                if ( (this.mode||0) == 1 ) {
                lt_nextIssue();
                }

                    lt_ignoreCallback.call('addWord',sgstore['lt'][uuid][hid]['rule']['id']);
                }

            });

            
        } else if ( value == 'rule' ) {
            editor.windowManager.open({
                title: 'Confirm',
                body: [
                    {type: 'textbox', name: 'uuid', value:uuid, style: 'display:none'},
                    {type: 'label', label: 'Are you sure you wish to ignore this rule going forward?'},
                    {type: 'textbox', name: 'hid', value:hid, style: 'display:none'}   
                ],
                onsubmit: function(e) {


                    sgstore['run'].push({ 
                        node: mynode, mode:mode,
                        func: function () {
                            sgstore['ignore']['rule'][sgstore['lt'][e.data.uuid][e.data.hid]['rule']['id']]=1;

                            $(editor_body()).find( 'span[data-rule="'+sgstore['lt'][e.data.uuid][e.data.hid]['rule']['id']+'"]' ).each(function () {
                                $(this).replaceWith( $(this).html() );
                        
                            });


    if (lt_showProgressBar == true) {
    var progressbar = $(editor.theme.panel.find('#lt-sgcheck')[0].$el).find('span');

    $(progressbar).html( $(editor_body()).find('.lt-highlight').length + ' Issue(s)'  );
     }
                if ( (this.mode||0) == 1 ) {
                lt_nextIssue();
                }

                            lt_ignoreCallback.call('addRule',sgstore['lt'][e.data.uuid][e.data.hid]['rule']['id']);
                            
                        }
                    });

                }
            });

        }

    }




}

function getCaretOffset(element) {
    var caretOffset = 0;
    var doc = element.ownerDocument || element.document;
    var win = doc.defaultView || doc.parentWindow;
    var sel;
    if (typeof win.getSelection != "undefined") {
        sel = win.getSelection();
        if (sel.rangeCount > 0) {
            var range = win.getSelection().getRangeAt(0);
            var preCaretRange = range.cloneRange();
            preCaretRange.selectNodeContents(element);
            preCaretRange.setEnd(range.endContainer, range.endOffset);
            caretOffset = preCaretRange.toString().length;
        }
    } else if ( (sel = doc.selection) && sel.type != "Control") {
        var textRange = sel.createRange();
        var preCaretTextRange = doc.body.createTextRange();
        preCaretTextRange.moveToElementText(element);
        preCaretTextRange.setEndPoint("EndToEnd", textRange);
        caretOffset = preCaretTextRange.text.length;
    }
    return caretOffset;
}










function editor_body () {
return tinymce.activeEditor.getBody();
}


function editor_selectnode () {
return tinyMCE.activeEditor.selection.getNode();
}



function editor_bookmark (bm) {

if ( bm == undefined ) {
return tinymce.activeEditor.selection.getBookmark();
} else {
return tinymce.activeEditor.selection.moveToBookmark(bm);
}


}

function editor_id () {
return tinymce.activeEditor.id;
}



});


