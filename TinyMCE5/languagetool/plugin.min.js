/**
 *
 * Copyright, KnowZero
 * Released under Apache 2.0 License.
 * Version 0.36-Alpha
 *
 * Contributing: https://github.com/KnowZero/tinymce4-languagetool
 */

(function($) {

 var scriptLoader = new tinymce.dom.ScriptLoader();


 tinymce.PluginManager.add('languagetool', function(editor, url) {

 editor.on('PreInit', function () { 
    editor.serializer.addNodeFilter('span', function (nodes) {
        var i = nodes.length;

        while (i--) {
            var node = nodes[i];
            if ( /^lt-highlight(?: |-remove )/.test(node.attr('class')) == true ) {
                node.unwrap();
            }


        }

    });
 });

var storeVP;
var instanceApi;
var checkedList = {};

// Create UI Elements



var buttonMenu = [
{ text: "Find/Replace Dialog", onAction: function (buttonApi) { lt_issueDialog() } },
{ text: "Configuration", onAction: function (buttonApi) {  

    var configWindow = [];

    configWindow.push(
                                        {
                                            title: 'Ignore List',
                                            type: "form",
                                            items: [
                                                { name: 'ignore_rules', id: 'lt_ignoreRulesCfg', type: 'selectbox', size: 10, label: 'Rules', options: function() { return Object.keys( LT.getStore('ignore','rule') ) } },
                                                {
                                                    type   : 'button',
                                                    name   : 'button',
                                                    label  : ' ',
                                                    text   : 'Remove Ignoring Rule',
                                                    onclick: function() {LT.removeRule}
                                                },

                                                { name: 'ignore_words', id: 'lt_ignoreWordsCfg', type: 'selectbox', size: 10, label: 'Words', options: function() { Object.keys( LT.getStore('ignore','all') )} },

                                                {
                                                    type   : 'button',
                                                    name   : 'button',
                                                    label  : ' ',
                                                    text   : 'Remove Ignoring Word',
                                                    onclick:  function() {LT.removeWord}
                                                }

                                            ]
                                        }
    );

/*
    configWindow.push(

        {
            title: "Preferences",
            type: "form",
            items: [
                { name: 'set_language', id: 'lt_setLanguage', type: 'selectbox', size: 1, label: 'Set Language', options: [] }
            ]
        }

    );
*/


            editor.windowManager.open({
                title: 'Configuration',
                bodyType: 'tabpanel',
                body: configWindow,
                onsubmit: function(e) {


 

                }
            });


   } },
];
var buttonArgs = {
        tooltip: 'Spellcheck',
        onAction: function (buttonApi) {},
        type: 'menubutton',
        icon: 'spellchecker',
        menu: buttonMenu
      };


 editor.ui.registry.addButton('languagetool', buttonArgs);


 scriptLoader.add( url+'/include/languagetool.min.js' );


scriptLoader.loadQueue(function() {

tinymce.activeEditor.settings['lt_library_path']=url;

var LT = new LanguageTool(tinymce.activeEditor.settings,$);







// Register tie functions

LT.setFunction('bookmark',function (bm) {
if ( bm == undefined ) {
return tinymce.activeEditor.selection.getBookmark();
} else {
return tinymce.activeEditor.selection.moveToBookmark(bm);
}
});

LT.setFunction('window',function () {
return editor.getWin();
});

LT.setFunction('body',function () {
return tinymce.activeEditor.getBody();
});

LT.setFunction('id',function () {
return tinymce.activeEditor.id;
});

LT.setFunction('container',function () {
return '#'+tinymce.activeEditor.id+'_ifr';
});

LT.setFunction('selectnode',function () {
return tinyMCE.activeEditor.selection.getNode();
});

LT.setFunction('setundo',function (msg) {
editor.undoManager.add();
});

LT.setFunction('alert',function (msg) {
tinymce.activeEditor.windowManager.alert(msg);
});

LT.setFunction('confirm',function (msg,uuid,hid,func) {

            editor.windowManager.open({
                title: 'Confirm',
                body: [
                    {type: 'textbox', name: 'uuid', value:uuid, style: 'display:none'},
                    {type: 'label', label: msg},
                    {type: 'textbox', name: 'hid', value:hid, style: 'display:none'}   
                ],
                onsubmit: func
                });

});


LT.setFunction('setcss',function (path) {
editor.dom.loadCSS(url + path);
});



LT.setFunction('contextmenu_hide',function () {
$(tinymce.DOM.doc).find(".mce-contextmenu").hide();
});


LT.setFunction('progress_container',function () {
var statusbar = tinymce.activeEditor.editorContainer.getElementsByClassName('tox-statusbar')[0];
if (statusbar != undefined) {
    return statusbar;
//return statusbar.$el;
}
});

LT.setFunction('progress_init',function () {
var statusbar = tinymce.activeEditor.editorContainer.getElementsByClassName('tox-statusbar')[0];
if (statusbar != undefined) {




var el1 = document.createElement("div");
Object.assign(el1, {
  className: 'sgcheck ico i-spellchecker lt-sgcheck',
  id: 'lt-sgcheck',
  onclick: function () {
    lt_issueDialog();
  }
});
var el2 = document.createElement("progress");
Object.assign(el2, {
  className: 'lt-progress',
  max: "100",
  value: "0"
});

var el3 = document.createElement("span");
Object.assign(el2, {
  className: 'lt-status',
});
el3.textContent = '0 Issue(s)';

el1.appendChild(el2);
el1.appendChild(el3);

statusbar.insertBefore( el1, statusbar.getElementsByClassName('tox-statusbar__resize-handle')[0]  );

}

});


// dialog

LT.setFunction('dialog_setmessage',function (msg) {
    console.log( tinymce.activeEditor.editorContainer, tinymce.activeEditor.editorContainer.getElementsByClassName('lt_issueMessage') )
document.getElementsByClassName('tox-dialog')[0].getElementsByClassName('lt_issueMessage')[0].textContent = msg;
});

LT.setFunction('dialog_setchangeto',function (msg) {
    //instanceApi.setData({ 'lt_issueChangeTo':msg });
document.getElementsByClassName('tox-dialog')[0].getElementsByClassName('lt_issueChangeTo')[0].textContent = msg;
});

LT.setFunction('dialog_suggestions',function (msg) {
return document.getElementsByClassName('tox-dialog')[0].getElementsByClassName('lt_issueSuggestions')[0];
});


// Register events

 editor.on('keyPress',function(e) { LT.getEvent('keypress',this,e); });
 editor.on('keyUp', function(e) { LT.getEvent('keyup',this,e); });
 editor.on('keyDown',function(e) { LT.getEvent('keydown',this,e); });

 editor.on('NodeChange', function(e) { LT.getEvent('nodechange',this,e); });
 editor.on('SetContent', function(e) { LT.getEvent('setcontent',this,e); });

 //editor.on('init', function() { LT.getEvent('init');  });

 editor.on('remove', function(e) { LT.getEvent('remove',this,e); delete LT; });

 editor.on('contextmenu', function(e) { return LT.getEvent('contextmenu',this,e);  });
 editor.on('mousedown', function(e) { LT.getEvent('mousedown',this,e); });

// Paste progress
 var pasteprogress=0;
 editor.on('BeforePastePreProcess', function (e) {
    pasteprogress=Math.round(e.content.length / 1000);
    LT.setProgress(0,pasteprogress  );

 });

 editor.on('PastePostProcess', function (e) {
   LT.setProgress( pasteprogress );
 });

 // Register commands

 editor.addCommand('mceLTDisable', function () {
    LT.setStore('enabled',false);

 });

 editor.addCommand('mceLTEnable', function () {
    LT.setStore('enabled',true);
 });

 editor.addCommand('mceLTProcess', function () {
    LT.manualProcess();
 });

 editor.addCommand('mceLTViewportProcessDisable', function () {
    if ( LT.getStore('viewport_process') != 'temp' ) {
        storeVP = LT.getStore('viewport_process');
    }
    LT.setStore('viewport_process','temp');
 });

 editor.addCommand('mceLTViewportProcessEnable', function () {
    LT.setStore('viewport_process',storeVP);
 });


// Issue Dialog



function lt_issueDialog() {
if ( LT.getStore('viewport_process') != 'temp' ) {
storeVP = LT.getStore('viewport_process');
}
LT.setStore('viewport_process','temp');
var tfilter=[];

Object.keys(LT.highlightList).forEach(function(key){
    
    tfilter.push( {
        type: 'htmlpanel', 
        html: '<input type="checkbox" class="lt_issueFilterAllow" disabled="true" checked="true" name="lt-filter-check-'+key+'" id="lt-filter-check-'+key+'" value="'+LT.highlightList[key]+'"> '+
        '<label for="lt-filter-check-'+key+'">'+key.charAt(0).toUpperCase() + key.slice(1) + '</label>' 
});
    
});



            instanceApi = editor.windowManager.open({
                title: 'Spelling/Grammar Check',
                id: 'lt-sgDialog',
                body: {
                    
                     type: 'panel',
                     items: [
                    { type: 'htmlpanel', html: '<div class="lt_issueMessage">?</div>' },
                   {
                    type   : 'bar',

                    items  : [
                        { type: 'htmlpanel', html: '-&nbsp;Action:' },
                        { type:'button', name:'apply', text: 'Apply', value: 'Apply' },
                        { type:'button', name:'skip', text: 'Skip', value: 'Skip' },
                        { type:'button', name:'ignore', text: 'Ignore', value: 'Ignore' },
                        { type:'button', name:'ignoreall', text: 'Ignore All', value: 'Ignore All'},
                        { type:'button', name:'ignorerule', text: 'Ignore Rule', value: 'Ignore Rule' }
                    ]
                },
 {type: 'htmlpanel', html: 'Change To: <input type="text" class="lt_issueChangeTo tox-textfield" id="lt_issueChangeTo">'},
 
     
                    { 
type: 'htmlpanel', html: '<div class="tox-selectfield"><select class="lt_issueSuggestions" id="lt_issueSuggestions" size="10"></select></div>',
                    }, 
                

                    {
                        type:'bar',
                           
                            items:[
                             { type: 'htmlpanel', html: 'Allow Filter:' },
                            {
                                        type: 'grid',
                                
                                        name:'lt_issueFilterGroup',
                                        columns: 3,
                                        items: tfilter
                            }]

                    }
                ]},
                buttons: [
                    {
                    type: 'submit',
                    name: 'submitButton',
                    text: 'OK',
                    primary: true
                    },
                    {
                    type: 'cancel',
                    name: 'closeButton',
                    text: 'Cancel'
                    }

                ],
                
                onAction: function(eventApi, details) {

                    var ident = details.name;
                    
                    if (ident == 'apply') { LT.setAcceptDialog(); }
                    else if (ident == 'skip') { LT.setSkipDialog(); }
                    else if (ident == 'ignore') { LT.setIgnoreDialog('once'); }
                    else if (ident == 'ignoreall') { LT.setIgnoreDialog('all'); }
                    else if (ident == 'ignorerule') { LT.setIgnoreDialog('rule'); }
                    
                },

                onSubmit: function(api) {
LT.setStore('viewport_process',storeVP);
$( tinymce.activeEditor.getBody() ).find('.dialog-highlight').removeClass('dialog-highlight');
$( tinymce.activeEditor.getBody() ).find('.skip-dialog-highlight').removeClass('skip-dialog-highlight');
                api.close()
                },
                onCancel: function(api) {
LT.setStore('viewport_process',storeVP);
$( tinymce.activeEditor.getBody() ).find('.dialog-highlight').removeClass('dialog-highlight');
$( tinymce.activeEditor.getBody() ).find('.skip-dialog-highlight').removeClass('skip-dialog-highlight');
                api.close()
                }
                
            });
        
            var suggestionsList = document.getElementsByClassName('tox-dialog')[0].getElementsByClassName('lt_issueSuggestions')[0];
            
            suggestionsList.addEventListener("click", function(e){ document.getElementsByClassName('tox-dialog')[0].getElementsByClassName('lt_issueChangeTo')[0].setAttribute('value',$(e.target).val()); });
            suggestionsList.addEventListener("dblclick", function(e){ LT.setAcceptDialog( $(e.target).parent(), $(e.target).parent() ); });
            
            document.getElementsByClassName('tox-dialog-wrap__backdrop')[0].style.display = 'none';
            
            
            
        LT.nextIssue(1);


}




LT.getEvent('init');
 });
});


}(jQuery));
